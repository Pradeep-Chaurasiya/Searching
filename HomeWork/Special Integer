public class Solution {
    public int solve(int[] A, int B) {
        
    //   int n = A.length;  // BF  // O(n^3)
    //   int ans = 0;
    //   for(int k=1; k<=n; k++){
    //       boolean flag = true;
    //       int i = 0;
    //       int j = k-1;
    //       while(i<=j && j<n){
    //           int sum = 0;
    //           for(int l=i; l<=j; l++){
    //               sum += A[l];
    //           }
    //           if(sum>B)  flag = false;
    //           i++;
    //           j++;
    //       }
    //       if(!flag) break;
    //       ans = k;
    //   }
    //   return ans;
    
    // int n = A.length;  // window sum
    // int ans = 0;
    
    // for(int k=1; k<=n; k++){ // O(n^2)
    //     int sum = 0;
    //     for(int i=0; i<k; i++){  // window sum 
    //         sum += A[i];
    //     }
    //     if(sum>B) return ans;
    //     for(int j=k; j<n; j++){
    //         sum += A[j]-A[j-k];
    //         if(sum>B) return ans;
    //     }
    //     ans = k;
    // }   
    // return ans;
    
    int n = A.length;  // Binary search and window sum
    return binarySearch(A, 0, n, B);

    }
    
    int binarySearch(int B[], int low, int high, int target){
        int n = B.length;
        int ans = 0;
        
        while(low<=high){
            long sum = 0;   // sum can be overflow that's why taking as long
            boolean flag = true;
            int mid = (low+high)/2;
            for(int i=0; i<mid; i++){
                sum += B[i];
            }
            if(sum > target) flag = false;
            for(int j=mid; j<n; j++){
                sum += B[j]-B[j-mid];
                if(sum > target) flag = false;
            }
            if(flag){
                 low = mid+1;
                 ans = mid;
            }
            else{
                high = mid-1; 
            }
            
        }
        return ans;
    }
}
