public class Solution {
    public int solve(int[] A) {
        // int l = 0;
        // int r = A.length-1;
        
        // int ans = binarySearch(A,l,r);
        // return ans;
        int n = A.length;
        int ans = 0;
        for(int i : A){
            ans = ans^i;
        }
        return ans;
    }
    
    // int binarySearch(int B[], int left, int right){
    //     while(left<=right){
    //         int mid = (left+right)/2;
    //         if(left == right && left == (B.length-1)) return B[left];
    //         else if(left == 0 && B[left+1] != B[left]) return B[0];
            
    //         else if(!(B[mid] == B[mid-1] || B[mid] == B[mid+1])) return B[mid];
    //         else if(B[mid] == B[mid-1]){
    //             int firstoccur = mid-1;
    //             if((firstoccur&1)==0) left = mid+1;
    //             else right = mid-1;
    //         }
    //         else if(B[mid] == B[mid+1]){
    //             int firstoccur = mid;
    //           if((firstoccur&1)==0) left = mid+1;
    //             else right = mid-1;;
    //         }
            
           
    //     }
    //     return -1;
    // }
}
