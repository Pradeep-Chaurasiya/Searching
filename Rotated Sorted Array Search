public class Solution {
    // DO NOT MODIFY THE ARGUMENTS WITH "final" PREFIX. IT IS READ ONLY
    public int search(final int[] A, int B) {
        
        return binarySearch(A, 0, A.length-1, B);
    }
    
    int binarySearch(int C[], int low, int high, int target){
        
        while(low<=high){
            int mid = (low+high)/2;
            
            if(C[mid] == target) return mid;
            else if(C[0]>=C[mid] && C[0]>=target){ // when mid is in correct(right) part
                if(C[mid]>target)  high = mid-1;
                else  low = mid+1;
            }
            
            else if(C[0]<=C[mid] && C[0]<=target){ // when mid is in correct(left) part
                if(C[mid]>target)  high = mid-1;
                else  low = mid+1;
            }
            
            else if(C[0]>=C[mid] && C[0]<=target){ // when mid is in not at correct part --> it should be in left part
                  high = mid-1;
            }
            else if(C[0]<=C[mid] && C[0]>=target){  // when mid is in not at correct part --> it should be in right part
                  low = mid+1;
            }
        }
        return -1;
    }
}
